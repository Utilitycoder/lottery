/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Signer,
  utils,
  Contract,
  ContractFactory,
  BytesLike,
  BigNumberish,
  Overrides,
} from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  Lottery,
  LotteryInterface,
} from "../../../contracts/lottery.sol/Lottery";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "vrfCoordinatorV2",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_entranceFee",
        type: "uint256",
      },
      {
        internalType: "bytes32",
        name: "gaslane",
        type: "bytes32",
      },
      {
        internalType: "uint64",
        name: "subscriptionId",
        type: "uint64",
      },
      {
        internalType: "uint32",
        name: "callbackGasLimit",
        type: "uint32",
      },
      {
        internalType: "uint256",
        name: "interval",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "Lottery__MoneyNotSent",
    type: "error",
  },
  {
    inputs: [],
    name: "Lottery__NotAvailable",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "balance",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "numPlayers",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "LotteryState",
        type: "uint256",
      },
    ],
    name: "Lottery__UpkeepNotNeeded",
    type: "error",
  },
  {
    inputs: [],
    name: "Lottery__sendMoreEth",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "have",
        type: "address",
      },
      {
        internalType: "address",
        name: "want",
        type: "address",
      },
    ],
    name: "OnlyCoordinatorCanFulfill",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "uint256",
        name: "requestId",
        type: "uint256",
      },
    ],
    name: "RequestedLotteryWinner",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "uint256",
        name: "_amount",
        type: "uint256",
      },
      {
        indexed: true,
        internalType: "address",
        name: "_player",
        type: "address",
      },
    ],
    name: "newPlayer",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "winnners",
        type: "address",
      },
    ],
    name: "recentWinner",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    name: "checkUpkeep",
    outputs: [
      {
        internalType: "bool",
        name: "upkeepNeeded",
        type: "bool",
      },
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "enterLottery",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [],
    name: "getEntranceFee",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getInterval",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getLatestTimeStamp",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getLotteryState",
    outputs: [
      {
        internalType: "enum Lottery.LotteryState",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getNumOfPlayers",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getNumWords",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "index",
        type: "uint256",
      },
    ],
    name: "getPlayer",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getRecentWinner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getRequestConfirmation",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    name: "performUpkeep",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "requestId",
        type: "uint256",
      },
      {
        internalType: "uint256[]",
        name: "randomWords",
        type: "uint256[]",
      },
    ],
    name: "rawFulfillRandomWords",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x6101606040523480156200001257600080fd5b506040516200186c3803806200186c8339818101604052810190620000389190620002a0565b858073ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1660601b81525050508460c081815250508573ffffffffffffffffffffffffffffffffffffffff1660a08173ffffffffffffffffffffffffffffffffffffffff1660601b815250508360e081815250508267ffffffffffffffff166101008167ffffffffffffffff1660c01b815250508163ffffffff166101208163ffffffff1660e01b815250506000600160146101000a81548160ff021916908360018111156200011957620001186200033c565b5b0217905550426002819055508061014081815250505050505050506200036b565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006200016c826200013f565b9050919050565b6200017e816200015f565b81146200018a57600080fd5b50565b6000815190506200019e8162000173565b92915050565b6000819050919050565b620001b981620001a4565b8114620001c557600080fd5b50565b600081519050620001d981620001ae565b92915050565b6000819050919050565b620001f481620001df565b81146200020057600080fd5b50565b6000815190506200021481620001e9565b92915050565b600067ffffffffffffffff82169050919050565b62000239816200021a565b81146200024557600080fd5b50565b60008151905062000259816200022e565b92915050565b600063ffffffff82169050919050565b6200027a816200025f565b81146200028657600080fd5b50565b6000815190506200029a816200026f565b92915050565b60008060008060008060c08789031215620002c057620002bf6200013a565b5b6000620002d089828a016200018d565b9650506020620002e389828a01620001c8565b9550506040620002f689828a0162000203565b94505060606200030989828a0162000248565b93505060806200031c89828a0162000289565b92505060a06200032f89828a01620001c8565b9150509295509295509295565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60805160601c60a05160601c60c05160e0516101005160c01c6101205160e01c61014051611485620003e76000396000818161068401526106f20152600061051f015260006104fc015260006104db0152600081816102fa01526107180152600061049f015260008181610320015261037401526114856000f3fe6080604052600436106100c25760003560e01c8063565429de1161007f57806391ad27b41161005957806391ad27b414610259578063c1af578514610284578063ca6a9ef81461028e578063e55ae4e8146102b9576100c2565b8063565429de146101c55780636b68c03c146101f05780636e04ff0d1461021b576100c2565b806309bc33a7146100c75780631fe543e3146100f2578063320229eb1461011b5780634585e33b14610146578063473f1ddc1461016f57806353a2c19a1461019a575b600080fd5b3480156100d357600080fd5b506100dc6102f6565b6040516100e99190610bcb565b60405180910390f35b3480156100fe57600080fd5b5061011960048036038101906101149190610d7f565b61031e565b005b34801561012757600080fd5b506101306103de565b60405161013d9190610bcb565b60405180910390f35b34801561015257600080fd5b5061016d60048036038101906101689190610e36565b6103e8565b005b34801561017b57600080fd5b506101846105e7565b6040516101919190610ec4565b60405180910390f35b3480156101a657600080fd5b506101af610611565b6040516101bc9190610bcb565b60405180910390f35b3480156101d157600080fd5b506101da61061e565b6040516101e79190610bcb565b60405180910390f35b3480156101fc57600080fd5b5061020561062a565b6040516102129190610f56565b60405180910390f35b34801561022757600080fd5b50610242600480360381019061023d9190611026565b610641565b604051610250929190611112565b60405180910390f35b34801561026557600080fd5b5061026e6106ee565b60405161027b9190610bcb565b60405180910390f35b61028c610716565b005b34801561029a57600080fd5b506102a3610886565b6040516102b09190610bcb565b60405180910390f35b3480156102c557600080fd5b506102e060048036038101906102db9190611142565b610893565b6040516102ed9190610ec4565b60405180910390f35b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146103d057337f00000000000000000000000000000000000000000000000000000000000000006040517f1cf993f40000000000000000000000000000000000000000000000000000000081526004016103c792919061116f565b60405180910390fd5b6103da82826108da565b5050565b6000600254905090565b600061040260405180602001604052806000815250610641565b509050806104715747600080549050600160149054906101000a900460ff16600181111561043357610432610edf565b5b6040517f6e195f2500000000000000000000000000000000000000000000000000000000815260040161046893929190611198565b60405180910390fd5b60018060146101000a81548160ff0219169083600181111561049657610495610edf565b5b021790555060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16635d3b1d307f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000060037f000000000000000000000000000000000000000000000000000000000000000060016040518663ffffffff1660e01b8152600401610560959493929190611282565b602060405180830381600087803b15801561057a57600080fd5b505af115801561058e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105b291906112ea565b9050807febf56642252004c18a776f30d528e7a0ce8c5db14b6596fb6550f630c8a24c6c60405160405180910390a250505050565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000600161ffff16905090565b60008080549050905090565b6000600160149054906101000a900460ff16905090565b600060606000600160149054906101000a900460ff16600181111561066957610668610edf565b5b6000600181111561067d5761067c610edf565b5b14905060007f0000000000000000000000000000000000000000000000000000000000000000600254426106b19190611346565b119050600080600080549050119050600080471190508380156106d15750825b80156106da5750815b80156106e35750805b955050505050915091565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b7f0000000000000000000000000000000000000000000000000000000000000000341015610770576040517f84da4c9d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600181111561078457610783610edf565b5b600160149054906101000a900460ff1660018111156107a6576107a5610edf565b5b146107dd576040517f3c415f9900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503373ffffffffffffffffffffffffffffffffffffffff16347f24db4f65d53d68dc208151fc0a00d767da628055a922836a07edef3b5732f9a260405160405180910390a3565b6000600361ffff16905090565b60008082815481106108a8576108a761137a565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b60008080549050826000815181106108f5576108f461137a565b5b602002602001015161090791906113d8565b9050600080828154811061091e5761091d61137a565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905080600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000600160146101000a81548160ff021916908360018111156109b2576109b1610edf565b5b0217905550600067ffffffffffffffff8111156109d2576109d1610c3c565b5b604051908082528060200260200182016040528015610a005781602001602082028036833780820191505090505b5060009080519060200190610a16929190610b0b565b504260028190555060008173ffffffffffffffffffffffffffffffffffffffff1647604051610a449061143a565b60006040518083038185875af1925050503d8060008114610a81576040519150601f19603f3d011682016040523d82523d6000602084013e610a86565b606091505b5050905080610ac1576040517f3a47374900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8173ffffffffffffffffffffffffffffffffffffffff167fcb9fa3034843627ae01a821c8b4301695ba7f920fba3715887eea51b3420167360405160405180910390a25050505050565b828054828255906000526020600020908101928215610b84579160200282015b82811115610b835782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190610b2b565b5b509050610b919190610b95565b5090565b5b80821115610bae576000816000905550600101610b96565b5090565b6000819050919050565b610bc581610bb2565b82525050565b6000602082019050610be06000830184610bbc565b92915050565b6000604051905090565b600080fd5b600080fd5b610c0381610bb2565b8114610c0e57600080fd5b50565b600081359050610c2081610bfa565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b610c7482610c2b565b810181811067ffffffffffffffff82111715610c9357610c92610c3c565b5b80604052505050565b6000610ca6610be6565b9050610cb28282610c6b565b919050565b600067ffffffffffffffff821115610cd257610cd1610c3c565b5b602082029050602081019050919050565b600080fd5b6000610cfb610cf684610cb7565b610c9c565b90508083825260208201905060208402830185811115610d1e57610d1d610ce3565b5b835b81811015610d475780610d338882610c11565b845260208401935050602081019050610d20565b5050509392505050565b600082601f830112610d6657610d65610c26565b5b8135610d76848260208601610ce8565b91505092915050565b60008060408385031215610d9657610d95610bf0565b5b6000610da485828601610c11565b925050602083013567ffffffffffffffff811115610dc557610dc4610bf5565b5b610dd185828601610d51565b9150509250929050565b600080fd5b60008083601f840112610df657610df5610c26565b5b8235905067ffffffffffffffff811115610e1357610e12610ddb565b5b602083019150836001820283011115610e2f57610e2e610ce3565b5b9250929050565b60008060208385031215610e4d57610e4c610bf0565b5b600083013567ffffffffffffffff811115610e6b57610e6a610bf5565b5b610e7785828601610de0565b92509250509250929050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610eae82610e83565b9050919050565b610ebe81610ea3565b82525050565b6000602082019050610ed96000830184610eb5565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60028110610f1f57610f1e610edf565b5b50565b6000819050610f3082610f0e565b919050565b6000610f4082610f22565b9050919050565b610f5081610f35565b82525050565b6000602082019050610f6b6000830184610f47565b92915050565b600080fd5b600067ffffffffffffffff821115610f9157610f90610c3c565b5b610f9a82610c2b565b9050602081019050919050565b82818337600083830152505050565b6000610fc9610fc484610f76565b610c9c565b905082815260208101848484011115610fe557610fe4610f71565b5b610ff0848285610fa7565b509392505050565b600082601f83011261100d5761100c610c26565b5b813561101d848260208601610fb6565b91505092915050565b60006020828403121561103c5761103b610bf0565b5b600082013567ffffffffffffffff81111561105a57611059610bf5565b5b61106684828501610ff8565b91505092915050565b60008115159050919050565b6110848161106f565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b838110156110c45780820151818401526020810190506110a9565b838111156110d3576000848401525b50505050565b60006110e48261108a565b6110ee8185611095565b93506110fe8185602086016110a6565b61110781610c2b565b840191505092915050565b6000604082019050611127600083018561107b565b818103602083015261113981846110d9565b90509392505050565b60006020828403121561115857611157610bf0565b5b600061116684828501610c11565b91505092915050565b60006040820190506111846000830185610eb5565b6111916020830184610eb5565b9392505050565b60006060820190506111ad6000830186610bbc565b6111ba6020830185610bbc565b6111c76040830184610bbc565b949350505050565b6000819050919050565b6111e2816111cf565b82525050565b600067ffffffffffffffff82169050919050565b611205816111e8565b82525050565b600061ffff82169050919050565b6112228161120b565b82525050565b600063ffffffff82169050919050565b61124181611228565b82525050565b6000819050919050565b600061126c6112676112628461120b565b611247565b611228565b9050919050565b61127c81611251565b82525050565b600060a08201905061129760008301886111d9565b6112a460208301876111fc565b6112b16040830186611219565b6112be6060830185611238565b6112cb6080830184611273565b9695505050505050565b6000815190506112e481610bfa565b92915050565b600060208284031215611300576112ff610bf0565b5b600061130e848285016112d5565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061135182610bb2565b915061135c83610bb2565b92508282101561136f5761136e611317565b5b828203905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60006113e382610bb2565b91506113ee83610bb2565b9250826113fe576113fd6113a9565b5b828206905092915050565b600081905092915050565b50565b6000611424600083611409565b915061142f82611414565b600082019050919050565b600061144582611417565b915081905091905056fea2646970667358221220641701bcab1345836afdbb63fcd99ae431b5e5eb3d3b18a662bc6706154965b264736f6c63430008080033";

type LotteryConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: LotteryConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Lottery__factory extends ContractFactory {
  constructor(...args: LotteryConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    vrfCoordinatorV2: PromiseOrValue<string>,
    _entranceFee: PromiseOrValue<BigNumberish>,
    gaslane: PromiseOrValue<BytesLike>,
    subscriptionId: PromiseOrValue<BigNumberish>,
    callbackGasLimit: PromiseOrValue<BigNumberish>,
    interval: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<Lottery> {
    return super.deploy(
      vrfCoordinatorV2,
      _entranceFee,
      gaslane,
      subscriptionId,
      callbackGasLimit,
      interval,
      overrides || {}
    ) as Promise<Lottery>;
  }
  override getDeployTransaction(
    vrfCoordinatorV2: PromiseOrValue<string>,
    _entranceFee: PromiseOrValue<BigNumberish>,
    gaslane: PromiseOrValue<BytesLike>,
    subscriptionId: PromiseOrValue<BigNumberish>,
    callbackGasLimit: PromiseOrValue<BigNumberish>,
    interval: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(
      vrfCoordinatorV2,
      _entranceFee,
      gaslane,
      subscriptionId,
      callbackGasLimit,
      interval,
      overrides || {}
    );
  }
  override attach(address: string): Lottery {
    return super.attach(address) as Lottery;
  }
  override connect(signer: Signer): Lottery__factory {
    return super.connect(signer) as Lottery__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): LotteryInterface {
    return new utils.Interface(_abi) as LotteryInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): Lottery {
    return new Contract(address, _abi, signerOrProvider) as Lottery;
  }
}
