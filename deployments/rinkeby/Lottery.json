{
  "address": "0x1B05508e87B4C77528f5f999fa9635d04aaf8BcC",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "vrfCoordinatorV2",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_entranceFee",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "gaslane",
          "type": "bytes32"
        },
        {
          "internalType": "uint64",
          "name": "subscriptionId",
          "type": "uint64"
        },
        {
          "internalType": "uint32",
          "name": "callbackGasLimit",
          "type": "uint32"
        },
        {
          "internalType": "uint256",
          "name": "interval",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "Lottery__MoneyNotSent",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Lottery__NotAvailable",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "balance",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "numPlayers",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "LotteryState",
          "type": "uint256"
        }
      ],
      "name": "Lottery__UpkeepNotNeeded",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Lottery__sendMoreEth",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "have",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "want",
          "type": "address"
        }
      ],
      "name": "OnlyCoordinatorCanFulfill",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        }
      ],
      "name": "RequestedLotteryWinner",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_player",
          "type": "address"
        }
      ],
      "name": "newPlayer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "winnners",
          "type": "address"
        }
      ],
      "name": "recentWinner",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "checkUpkeep",
      "outputs": [
        {
          "internalType": "bool",
          "name": "upkeepNeeded",
          "type": "bool"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "enterLottery",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getEntranceFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getInterval",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getLatestTimeStamp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getLotteryState",
      "outputs": [
        {
          "internalType": "enum Lottery.LotteryState",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getNumOfPlayers",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getNumWords",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getPlayer",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRecentWinner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRequestConfirmation",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "performUpkeep",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "randomWords",
          "type": "uint256[]"
        }
      ],
      "name": "rawFulfillRandomWords",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xb700049f82cd343fd29185f1ccdbe964729fbdd461a4e23f0cf2cf64a6c60137",
  "receipt": {
    "to": null,
    "from": "0x6363ee65441B117996B40c1118cBb4DF96C7C42d",
    "contractAddress": "0x1B05508e87B4C77528f5f999fa9635d04aaf8BcC",
    "transactionIndex": 8,
    "gasUsed": "1274291",
    "logsBloom": "0x
    "blockHash": "0x981af7f8bcc82cdd6dc78be8fd79addb4b8d9c38c910ddadd67625eee21c65f5",
    "transactionHash": "0xb700049f82cd343fd29185f1ccdbe964729fbdd461a4e23f0cf2cf64a6c60137",
    "logs": [],
    "blockNumber": 10957922,
    "cumulativeGasUsed": "2892069",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x6168499c0cffcacd319c818142124b7a15e857ab",
    "100000000000000000",
    "0xd89b2bf150e3b9e13446986e571fb9cab24b13cea0a43ea20a6049a85cc807cc",
    "7048",
    "500000",
    "30"
  ],
  "numDeployments": 1,
  "solcInputHash": "82b365f62a5aca8647e6676a2e1c75f6",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"vrfCoordinatorV2\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_entranceFee\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"gaslane\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"subscriptionId\",\"type\":\"uint64\"},{\"internalType\":\"uint32\",\"name\":\"callbackGasLimit\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"interval\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"Lottery__MoneyNotSent\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Lottery__NotAvailable\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"numPlayers\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"LotteryState\",\"type\":\"uint256\"}],\"name\":\"Lottery__UpkeepNotNeeded\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Lottery__sendMoreEth\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"have\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"want\",\"type\":\"address\"}],\"name\":\"OnlyCoordinatorCanFulfill\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"}],\"name\":\"RequestedLotteryWinner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_player\",\"type\":\"address\"}],\"name\":\"newPlayer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"winnners\",\"type\":\"address\"}],\"name\":\"recentWinner\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"checkUpkeep\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"upkeepNeeded\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enterLottery\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getEntranceFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getInterval\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLatestTimeStamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLotteryState\",\"outputs\":[{\"internalType\":\"enum Lottery.LotteryState\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNumOfPlayers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNumWords\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getPlayer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRecentWinner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRequestConfirmation\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"performUpkeep\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"randomWords\",\"type\":\"uint256[]\"}],\"name\":\"rawFulfillRandomWords\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Lawal Abubakar\",\"details\":\"This implements the Chainlink VRF Version 2\",\"kind\":\"dev\",\"methods\":{\"checkUpkeep(bytes)\":{\"returns\":{\"upkeepNeeded\":\"The state of the contract before calling VRF\"}},\"constructor\":{\"params\":{\"callbackGasLimit\":\"same as gaslane\",\"gaslane\":\"needed as a variable for VRF requestRandomword Method (from Chainlink account)\",\"interval\":\"required to operate chainlink keeper\",\"subscriptionId\":\"same as gaslane\",\"vrfCoordinatorV2\":\"address of chainlink vrf\"}},\"performUpkeep(bytes)\":{\"details\":\"Once `checkUpkeep` is returning `true`, this function is called and it kicks off a Chainlink VRF call to get a random winner.\"}},\"title\":\"A sample Raffle Contract\",\"version\":1},\"userdoc\":{\"events\":{\"newPlayer(uint256,address)\":{\"notice\":\"Events \"}},\"kind\":\"user\",\"methods\":{\"checkUpkeep(bytes)\":{\"notice\":\"Function highlighted conditions that must be met before chaink VRF give us a random number\"},\"constructor\":{\"notice\":\"constructor to initialize some state variables\"},\"enterLottery()\":{\"notice\":\"This functions lets people participate in the lottery \"}},\"notice\":\"This contract is for creating a sample Lottery contract\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/lottery.sol\":\"Lottery\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n/** ****************************************************************************\\n * @notice Interface for contracts using VRF randomness\\n * *****************************************************************************\\n * @dev PURPOSE\\n *\\n * @dev Reggie the Random Oracle (not his real job) wants to provide randomness\\n * @dev to Vera the verifier in such a way that Vera can be sure he's not\\n * @dev making his output up to suit himself. Reggie provides Vera a public key\\n * @dev to which he knows the secret key. Each time Vera provides a seed to\\n * @dev Reggie, he gives back a value which is computed completely\\n * @dev deterministically from the seed and the secret key.\\n *\\n * @dev Reggie provides a proof by which Vera can verify that the output was\\n * @dev correctly computed once Reggie tells it to her, but without that proof,\\n * @dev the output is indistinguishable to her from a uniform random sample\\n * @dev from the output space.\\n *\\n * @dev The purpose of this contract is to make it easy for unrelated contracts\\n * @dev to talk to Vera the verifier about the work Reggie is doing, to provide\\n * @dev simple access to a verifiable source of randomness. It ensures 2 things:\\n * @dev 1. The fulfillment came from the VRFCoordinator\\n * @dev 2. The consumer contract implements fulfillRandomWords.\\n * *****************************************************************************\\n * @dev USAGE\\n *\\n * @dev Calling contracts must inherit from VRFConsumerBase, and can\\n * @dev initialize VRFConsumerBase's attributes in their constructor as\\n * @dev shown:\\n *\\n * @dev   contract VRFConsumer {\\n * @dev     constructor(<other arguments>, address _vrfCoordinator, address _link)\\n * @dev       VRFConsumerBase(_vrfCoordinator) public {\\n * @dev         <initialization with other arguments goes here>\\n * @dev       }\\n * @dev   }\\n *\\n * @dev The oracle will have given you an ID for the VRF keypair they have\\n * @dev committed to (let's call it keyHash). Create subscription, fund it\\n * @dev and your consumer contract as a consumer of it (see VRFCoordinatorInterface\\n * @dev subscription management functions).\\n * @dev Call requestRandomWords(keyHash, subId, minimumRequestConfirmations,\\n * @dev callbackGasLimit, numWords),\\n * @dev see (VRFCoordinatorInterface for a description of the arguments).\\n *\\n * @dev Once the VRFCoordinator has received and validated the oracle's response\\n * @dev to your request, it will call your contract's fulfillRandomWords method.\\n *\\n * @dev The randomness argument to fulfillRandomWords is a set of random words\\n * @dev generated from your requestId and the blockHash of the request.\\n *\\n * @dev If your contract could have concurrent requests open, you can use the\\n * @dev requestId returned from requestRandomWords to track which response is associated\\n * @dev with which randomness request.\\n * @dev See \\\"SECURITY CONSIDERATIONS\\\" for principles to keep in mind,\\n * @dev if your contract could have multiple requests in flight simultaneously.\\n *\\n * @dev Colliding `requestId`s are cryptographically impossible as long as seeds\\n * @dev differ.\\n *\\n * *****************************************************************************\\n * @dev SECURITY CONSIDERATIONS\\n *\\n * @dev A method with the ability to call your fulfillRandomness method directly\\n * @dev could spoof a VRF response with any random value, so it's critical that\\n * @dev it cannot be directly called by anything other than this base contract\\n * @dev (specifically, by the VRFConsumerBase.rawFulfillRandomness method).\\n *\\n * @dev For your users to trust that your contract's random behavior is free\\n * @dev from malicious interference, it's best if you can write it so that all\\n * @dev behaviors implied by a VRF response are executed *during* your\\n * @dev fulfillRandomness method. If your contract must store the response (or\\n * @dev anything derived from it) and use it later, you must ensure that any\\n * @dev user-significant behavior which depends on that stored value cannot be\\n * @dev manipulated by a subsequent VRF request.\\n *\\n * @dev Similarly, both miners and the VRF oracle itself have some influence\\n * @dev over the order in which VRF responses appear on the blockchain, so if\\n * @dev your contract could have multiple VRF requests in flight simultaneously,\\n * @dev you must ensure that the order in which the VRF responses arrive cannot\\n * @dev be used to manipulate your contract's user-significant behavior.\\n *\\n * @dev Since the block hash of the block which contains the requestRandomness\\n * @dev call is mixed into the input to the VRF *last*, a sufficiently powerful\\n * @dev miner could, in principle, fork the blockchain to evict the block\\n * @dev containing the request, forcing the request to be included in a\\n * @dev different block with a different hash, and therefore a different input\\n * @dev to the VRF. However, such an attack would incur a substantial economic\\n * @dev cost. This cost scales with the number of blocks the VRF oracle waits\\n * @dev until it calls responds to a request. It is for this reason that\\n * @dev that you can signal to an oracle you'd like them to wait longer before\\n * @dev responding to the request (however this is not enforced in the contract\\n * @dev and so remains effective only in the case of unmodified oracle software).\\n */\\nabstract contract VRFConsumerBaseV2 {\\n  error OnlyCoordinatorCanFulfill(address have, address want);\\n  address private immutable vrfCoordinator;\\n\\n  /**\\n   * @param _vrfCoordinator address of VRFCoordinator contract\\n   */\\n  constructor(address _vrfCoordinator) {\\n    vrfCoordinator = _vrfCoordinator;\\n  }\\n\\n  /**\\n   * @notice fulfillRandomness handles the VRF response. Your contract must\\n   * @notice implement it. See \\\"SECURITY CONSIDERATIONS\\\" above for important\\n   * @notice principles to keep in mind when implementing your fulfillRandomness\\n   * @notice method.\\n   *\\n   * @dev VRFConsumerBaseV2 expects its subcontracts to have a method with this\\n   * @dev signature, and will call it once it has verified the proof\\n   * @dev associated with the randomness. (It is triggered via a call to\\n   * @dev rawFulfillRandomness, below.)\\n   *\\n   * @param requestId The Id initially returned by requestRandomness\\n   * @param randomWords the VRF output expanded to the requested number of words\\n   */\\n  function fulfillRandomWords(uint256 requestId, uint256[] memory randomWords) internal virtual;\\n\\n  // rawFulfillRandomness is called by VRFCoordinator when it receives a valid VRF\\n  // proof. rawFulfillRandomness then calls fulfillRandomness, after validating\\n  // the origin of the call\\n  function rawFulfillRandomWords(uint256 requestId, uint256[] memory randomWords) external {\\n    if (msg.sender != vrfCoordinator) {\\n      revert OnlyCoordinatorCanFulfill(msg.sender, vrfCoordinator);\\n    }\\n    fulfillRandomWords(requestId, randomWords);\\n  }\\n}\\n\",\"keccak256\":\"0x3d709a5e0f1f9b8841172b10ba8af785dd51a13eda9fc395723a706e51329904\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/KeeperCompatibleInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface KeeperCompatibleInterface {\\n  /**\\n   * @notice method that is simulated by the keepers to see if any work actually\\n   * needs to be performed. This method does does not actually need to be\\n   * executable, and since it is only ever simulated it can consume lots of gas.\\n   * @dev To ensure that it is never called, you may want to add the\\n   * cannotExecute modifier from KeeperBase to your implementation of this\\n   * method.\\n   * @param checkData specified in the upkeep registration so it is always the\\n   * same for a registered upkeep. This can easily be broken down into specific\\n   * arguments using `abi.decode`, so multiple upkeeps can be registered on the\\n   * same contract and easily differentiated by the contract.\\n   * @return upkeepNeeded boolean to indicate whether the keeper should call\\n   * performUpkeep or not.\\n   * @return performData bytes that the keeper should call performUpkeep with, if\\n   * upkeep is needed. If you would like to encode data to decode later, try\\n   * `abi.encode`.\\n   */\\n  function checkUpkeep(bytes calldata checkData) external returns (bool upkeepNeeded, bytes memory performData);\\n\\n  /**\\n   * @notice method that is actually executed by the keepers, via the registry.\\n   * The data returned by the checkUpkeep simulation will be passed into\\n   * this method to actually be executed.\\n   * @dev The input to this method should not be trusted, and the caller of the\\n   * method should not even be restricted to any single registry. Anyone should\\n   * be able call it, and the input should be validated, there is no guarantee\\n   * that the data passed in is the performData returned from checkUpkeep. This\\n   * could happen due to malicious keepers, racing keepers, or simply a state\\n   * change while the performUpkeep transaction is waiting for confirmation.\\n   * Always validate the data passed in.\\n   * @param performData is the data which was passed back from the checkData\\n   * simulation. If it is encoded, it can easily be decoded into other types by\\n   * calling `abi.decode`. This data should not be trusted, and should be\\n   * validated against the contract's current state.\\n   */\\n  function performUpkeep(bytes calldata performData) external;\\n}\\n\",\"keccak256\":\"0xb6577cda6b731b655aebcb6e3c24f8658d3f4c5eda07200622d07d4570af33ea\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface VRFCoordinatorV2Interface {\\n  /**\\n   * @notice Get configuration relevant for making requests\\n   * @return minimumRequestConfirmations global min for request confirmations\\n   * @return maxGasLimit global max for request gas limit\\n   * @return s_provingKeyHashes list of registered key hashes\\n   */\\n  function getRequestConfig()\\n    external\\n    view\\n    returns (\\n      uint16,\\n      uint32,\\n      bytes32[] memory\\n    );\\n\\n  /**\\n   * @notice Request a set of random words.\\n   * @param keyHash - Corresponds to a particular oracle job which uses\\n   * that key for generating the VRF proof. Different keyHash's have different gas price\\n   * ceilings, so you can select a specific one to bound your maximum per request cost.\\n   * @param subId  - The ID of the VRF subscription. Must be funded\\n   * with the minimum subscription balance required for the selected keyHash.\\n   * @param minimumRequestConfirmations - How many blocks you'd like the\\n   * oracle to wait before responding to the request. See SECURITY CONSIDERATIONS\\n   * for why you may want to request more. The acceptable range is\\n   * [minimumRequestBlockConfirmations, 200].\\n   * @param callbackGasLimit - How much gas you'd like to receive in your\\n   * fulfillRandomWords callback. Note that gasleft() inside fulfillRandomWords\\n   * may be slightly less than this amount because of gas used calling the function\\n   * (argument decoding etc.), so you may need to request slightly more than you expect\\n   * to have inside fulfillRandomWords. The acceptable range is\\n   * [0, maxGasLimit]\\n   * @param numWords - The number of uint256 random values you'd like to receive\\n   * in your fulfillRandomWords callback. Note these numbers are expanded in a\\n   * secure way by the VRFCoordinator from a single random value supplied by the oracle.\\n   * @return requestId - A unique identifier of the request. Can be used to match\\n   * a request to a response in fulfillRandomWords.\\n   */\\n  function requestRandomWords(\\n    bytes32 keyHash,\\n    uint64 subId,\\n    uint16 minimumRequestConfirmations,\\n    uint32 callbackGasLimit,\\n    uint32 numWords\\n  ) external returns (uint256 requestId);\\n\\n  /**\\n   * @notice Create a VRF subscription.\\n   * @return subId - A unique subscription id.\\n   * @dev You can manage the consumer set dynamically with addConsumer/removeConsumer.\\n   * @dev Note to fund the subscription, use transferAndCall. For example\\n   * @dev  LINKTOKEN.transferAndCall(\\n   * @dev    address(COORDINATOR),\\n   * @dev    amount,\\n   * @dev    abi.encode(subId));\\n   */\\n  function createSubscription() external returns (uint64 subId);\\n\\n  /**\\n   * @notice Get a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @return balance - LINK balance of the subscription in juels.\\n   * @return reqCount - number of requests for this subscription, determines fee tier.\\n   * @return owner - owner of the subscription.\\n   * @return consumers - list of consumer address which are able to use this subscription.\\n   */\\n  function getSubscription(uint64 subId)\\n    external\\n    view\\n    returns (\\n      uint96 balance,\\n      uint64 reqCount,\\n      address owner,\\n      address[] memory consumers\\n    );\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @param newOwner - proposed new owner of the subscription\\n   */\\n  function requestSubscriptionOwnerTransfer(uint64 subId, address newOwner) external;\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @dev will revert if original owner of subId has\\n   * not requested that msg.sender become the new owner.\\n   */\\n  function acceptSubscriptionOwnerTransfer(uint64 subId) external;\\n\\n  /**\\n   * @notice Add a consumer to a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - New consumer which can use the subscription\\n   */\\n  function addConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Remove a consumer from a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - Consumer to remove from the subscription\\n   */\\n  function removeConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Cancel a subscription\\n   * @param subId - ID of the subscription\\n   * @param to - Where to send the remaining LINK to\\n   */\\n  function cancelSubscription(uint64 subId, address to) external;\\n}\\n\",\"keccak256\":\"0xcb29ee50ee2b05441e4deebf8b4756a0feec4f5497e36b6a1ca320f7ce561802\",\"license\":\"MIT\"},\"contracts/lottery.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/KeeperCompatibleInterface.sol\\\";\\n\\nerror Lottery__sendMoreEth();\\nerror Lottery__MoneyNotSent();\\nerror Lottery__NotAvailable();\\nerror Lottery__UpkeepNotNeeded(uint balance, uint numPlayers, uint LotteryState);\\n\\n/**@title A sample Raffle Contract\\n * @author Lawal Abubakar\\n * @notice This contract is for creating a sample Lottery contract\\n * @dev This implements the Chainlink VRF Version 2\\n */\\ncontract Lottery is VRFConsumerBaseV2, KeeperCompatibleInterface {\\n    //  Types\\n    enum LotteryState {\\n        OPEN,\\n        CALCULATING\\n    }\\n    /** State Variable */ \\n    VRFCoordinatorV2Interface private immutable i_vrfCoordinator;\\n    uint private immutable i_entranceFee;\\n    address payable[] private s_players;\\n    bytes32 private immutable i_gaslane;\\n    uint64 private immutable i_subscriptionId;\\n    uint32 private immutable i_callbackGasLimit;\\n    uint16 private constant REQUEST_CONFIRMATIONS = 3;\\n    uint16 private constant NUM_WORDS = 1;\\n\\n    /** Lottery variables */\\n    address private s_recentWinner;\\n    LotteryState private s_lotteryState;\\n    uint private s_lastTimeStamp;\\n    uint private immutable i_interval;\\n\\n    /** Events */\\n    event newPlayer(uint indexed _amount, address indexed _player);\\n    event recentWinner(address indexed winnners);\\n    event RequestedLotteryWinner(uint256 indexed requestId);\\n\\n    /**\\n    * @notice constructor to initialize some state variables\\n    * @param vrfCoordinatorV2 address of chainlink vrf\\n    * @param gaslane needed as a variable for VRF requestRandomword Method (from Chainlink account)\\n    * @param subscriptionId same as gaslane\\n    * @param callbackGasLimit same as gaslane\\n    * @param interval required to operate chainlink keeper\\n    */\\n    constructor(\\n        address vrfCoordinatorV2,\\n        uint _entranceFee,\\n        bytes32 gaslane,\\n        uint64 subscriptionId,\\n        uint32 callbackGasLimit,\\n        uint interval\\n    ) VRFConsumerBaseV2(vrfCoordinatorV2) {\\n        /** Initialize state variables with arguments */\\n        i_entranceFee = _entranceFee;\\n        i_vrfCoordinator = VRFCoordinatorV2Interface(vrfCoordinatorV2);\\n        i_gaslane = gaslane;\\n        i_subscriptionId = subscriptionId;\\n        i_callbackGasLimit = callbackGasLimit;\\n        s_lotteryState = LotteryState.OPEN;\\n        s_lastTimeStamp = block.timestamp;\\n        i_interval = interval;\\n    }\\n    /** @notice This functions lets people participate in the lottery \\n    */\\n    function enterLottery() public payable {\\n        // user can't send less than entraceFee\\n        if (msg.value < i_entranceFee) revert Lottery__sendMoreEth(); \\n        // Lottery must be ON to participate\\n        if (s_lotteryState != LotteryState.OPEN) revert Lottery__NotAvailable();\\n        // Add address of new player to s_player array\\n        s_players.push(payable(msg.sender));\\n        // Tell the world someone just joined the ongoing lottery and how much they participated with\\n        emit newPlayer(msg.value, msg.sender);\\n    }\\n    /** @notice Function highlighted conditions that must be met before chaink VRF give us a random number\\n    * @return upkeepNeeded The state of the contract before calling VRF\\n    */\\n    function checkUpkeep(\\n        bytes memory /*checkData*/\\n    )\\n        public\\n        override\\n        returns (\\n            bool upkeepNeeded,\\n            bytes memory /* performData */\\n        )\\n    {\\n        // Lottery is Open\\n        bool isOpen = (LotteryState.OPEN == s_lotteryState);\\n        // difference between last timestamp of VRF execution and current timestamp is greater than interval\\n        bool timePassed = ((block.timestamp - s_lastTimeStamp) > i_interval);\\n        // Guarantee that players have deposited money to play\\n        bool hasPlayers = (s_players.length > 0);\\n        // Guarantee that this contract has money.\\n        bool hasBalance = (address(this).balance > 0);\\n        // upkeep is required if all the above conditions are met before running chainlink keeper\\n        upkeepNeeded = (isOpen && timePassed && hasPlayers && hasBalance);\\n    }\\n\\n    /**\\n     * @dev Once `checkUpkeep` is returning `true`, this function is called\\n     * and it kicks off a Chainlink VRF call to get a random winner.\\n     */\\n    function performUpkeep(\\n        bytes calldata /* PerformData */\\n    ) external override {\\n        // Store the boolean received from checkUpkeep Function\\n        (bool upkeepNeeded, ) = checkUpkeep(\\\"\\\");\\n        // Revert if upkeepNeeded is false.\\n        if (!upkeepNeeded) {\\n            revert Lottery__UpkeepNotNeeded(\\n                address(this).balance,\\n                s_players.length,\\n                uint(s_lotteryState)\\n            );\\n        }\\n        // Change lottery state \\n        s_lotteryState = LotteryState.CALCULATING;\\n        // save what is returned from VRF in requestId\\n        uint requestId = i_vrfCoordinator.requestRandomWords(\\n            i_gaslane,\\n            i_subscriptionId,\\n            REQUEST_CONFIRMATIONS,\\n            i_callbackGasLimit,\\n            NUM_WORDS\\n        );\\n        emit RequestedLotteryWinner(requestId);\\n    }\\n\\n    function fulfillRandomWords(\\n        uint, /*requestId*/\\n        uint[] memory randomWords\\n    ) internal override {\\n        // select the index of the winner\\n        uint indexOfWinner = randomWords[0] % s_players.length;\\n        // Pick a winner according to the index returned above\\n        address payable winner = s_players[indexOfWinner];\\n        // Update S_recentWinner state variable\\n        s_recentWinner = winner;\\n        // restore LotteryState to OPEN\\n        s_lotteryState = LotteryState.OPEN;\\n        // restore s_players array to zero\\n        s_players = new address payable[](0);\\n        // Create a new timestamp\\n        s_lastTimeStamp = block.timestamp;\\n        // Send money to the winner\\n        (bool success, ) = winner.call{value: address(this).balance}(\\\"\\\");\\n        if (!success) revert Lottery__MoneyNotSent();\\n        // Emit event with the address of the winner\\n        emit recentWinner(winner);\\n    }\\n\\n    // Getter / View Functions\\n    function getEntranceFee() public view returns (uint) {\\n        return i_entranceFee;\\n    }\\n\\n    function getPlayer(uint index) public view returns (address) {\\n        return s_players[index];\\n    }\\n\\n    function getRecentWinner() public view returns (address) {\\n        return s_recentWinner;\\n    }\\n\\n    function getLotteryState() public view returns(LotteryState) {\\n        return s_lotteryState;\\n    }\\n\\n    function getNumOfPlayers() public view returns (uint) {\\n        return s_players.length;\\n    }\\n\\n    function getLatestTimeStamp() public view returns (uint) {\\n        return s_lastTimeStamp;\\n    }\\n\\n    function getInterval() public view returns (uint) {\\n        return i_interval;\\n    }\\n\\n    function getRequestConfirmation() public pure returns(uint) {\\n        return REQUEST_CONFIRMATIONS;\\n    }\\n\\n    function getNumWords() public pure returns(uint) {\\n        return NUM_WORDS;\\n    }\\n}\\n\",\"keccak256\":\"0xdbe6e034f5da3950fbc2133b8201cc624abdfffce0508024d55cc8c824ace3cb\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6101606040523480156200001257600080fd5b506040516200195c3803806200195c8339818101604052810190620000389190620001d1565b858073ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1660601b81525050508460c081815250508573ffffffffffffffffffffffffffffffffffffffff1660a08173ffffffffffffffffffffffffffffffffffffffff1660601b815250508360e081815250508267ffffffffffffffff166101008167ffffffffffffffff1660c01b815250508163ffffffff166101208163ffffffff1660e01b815250506000600160146101000a81548160ff021916908360018111156200013d577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b02179055504260028190555080610140818152505050505050505062000355565b6000815190506200016f81620002d3565b92915050565b6000815190506200018681620002ed565b92915050565b6000815190506200019d8162000307565b92915050565b600081519050620001b48162000321565b92915050565b600081519050620001cb816200033b565b92915050565b60008060008060008060c08789031215620001eb57600080fd5b6000620001fb89828a016200015e565b96505060206200020e89828a016200018c565b95505060406200022189828a0162000175565b94505060606200023489828a01620001ba565b93505060806200024789828a01620001a3565b92505060a06200025a89828a016200018c565b9150509295509295509295565b6000620002748262000285565b9050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600063ffffffff82169050919050565b600067ffffffffffffffff82169050919050565b620002de8162000267565b8114620002ea57600080fd5b50565b620002f8816200027b565b81146200030457600080fd5b50565b6200031281620002a5565b81146200031e57600080fd5b50565b6200032c81620002af565b81146200033857600080fd5b50565b6200034681620002bf565b81146200035257600080fd5b50565b60805160601c60a05160601c60c05160e0516101005160c01c6101205160e01c6101405161158b620003d16000396000818161071c015261078a0152600061056b01526000610548015260006105270152600081816102fa01526107b0015260006104eb0152600081816103200152610374015261158b6000f3fe6080604052600436106100c25760003560e01c8063565429de1161007f57806391ad27b41161005957806391ad27b414610259578063c1af578514610284578063ca6a9ef81461028e578063e55ae4e8146102b9576100c2565b8063565429de146101c55780636b68c03c146101f05780636e04ff0d1461021b576100c2565b806309bc33a7146100c75780631fe543e3146100f2578063320229eb1461011b5780634585e33b14610146578063473f1ddc1461016f57806353a2c19a1461019a575b600080fd5b3480156100d357600080fd5b506100dc6102f6565b6040516100e991906111cc565b60405180910390f35b3480156100fe57600080fd5b5061011960048036038101906101149190610f9e565b61031e565b005b34801561012757600080fd5b506101306103de565b60405161013d91906111cc565b60405180910390f35b34801561015257600080fd5b5061016d60048036038101906101689190610ec6565b6103e8565b005b34801561017b57600080fd5b50610184610633565b60405161019191906110ea565b60405180910390f35b3480156101a657600080fd5b506101af61065d565b6040516101bc91906111cc565b60405180910390f35b3480156101d157600080fd5b506101da61066a565b6040516101e791906111cc565b60405180910390f35b3480156101fc57600080fd5b50610205610676565b60405161021291906111b1565b60405180910390f35b34801561022757600080fd5b50610242600480360381019061023d9190610f0b565b61068d565b60405161025092919061112e565b60405180910390f35b34801561026557600080fd5b5061026e610786565b60405161027b91906111cc565b60405180910390f35b61028c6107ae565b005b34801561029a57600080fd5b506102a361096a565b6040516102b091906111cc565b60405180910390f35b3480156102c557600080fd5b506102e060048036038101906102db9190610f4c565b610977565b6040516102ed91906110ea565b60405180910390f35b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146103d057337f00000000000000000000000000000000000000000000000000000000000000006040517f1cf993f40000000000000000000000000000000000000000000000000000000081526004016103c7929190611105565b60405180910390fd5b6103da82826109e4565b5050565b6000600254905090565b60006104026040518060200160405280600081525061068d565b509050806104975747600080549050600160149054906101000a900460ff166001811115610459577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b6040517f6e195f2500000000000000000000000000000000000000000000000000000000815260040161048e939291906111e7565b60405180910390fd5b60018060146101000a81548160ff021916908360018111156104e2577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b021790555060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16635d3b1d307f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000060037f000000000000000000000000000000000000000000000000000000000000000060016040518663ffffffff1660e01b81526004016105ac95949392919061115e565b602060405180830381600087803b1580156105c657600080fd5b505af11580156105da573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105fe9190610f75565b9050807febf56642252004c18a776f30d528e7a0ce8c5db14b6596fb6550f630c8a24c6c60405160405180910390a250505050565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000600161ffff16905090565b60008080549050905090565b6000600160149054906101000a900460ff16905090565b600060606000600160149054906101000a900460ff1660018111156106db577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60006001811115610715577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b14905060007f00000000000000000000000000000000000000000000000000000000000000006002544261074991906112c7565b119050600080600080549050119050600080471190508380156107695750825b80156107725750815b801561077b5750805b955050505050915091565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b7f0000000000000000000000000000000000000000000000000000000000000000341015610808576040517f84da4c9d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60006001811115610842577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b600160149054906101000a900460ff16600181111561088a577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b146108c1576040517f3c415f9900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503373ffffffffffffffffffffffffffffffffffffffff16347f24db4f65d53d68dc208151fc0a00d767da628055a922836a07edef3b5732f9a260405160405180910390a3565b6000600361ffff16905090565b60008082815481106109b2577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6000808054905082600081518110610a25577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010151610a379190611429565b90506000808281548110610a74577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905080600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000600160146101000a81548160ff02191690836001811115610b2e577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b0217905550600067ffffffffffffffff811115610b74577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604051908082528060200260200182016040528015610ba25781602001602082028036833780820191505090505b5060009080519060200190610bb8929190610cad565b504260028190555060008173ffffffffffffffffffffffffffffffffffffffff1647604051610be6906110d5565b60006040518083038185875af1925050503d8060008114610c23576040519150601f19603f3d011682016040523d82523d6000602084013e610c28565b606091505b5050905080610c63576040517f3a47374900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8173ffffffffffffffffffffffffffffffffffffffff167fcb9fa3034843627ae01a821c8b4301695ba7f920fba3715887eea51b3420167360405160405180910390a25050505050565b828054828255906000526020600020908101928215610d26579160200282015b82811115610d255782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190610ccd565b5b509050610d339190610d37565b5090565b5b80821115610d50576000816000905550600101610d38565b5090565b6000610d67610d6284611243565b61121e565b90508083825260208201905082856020860282011115610d8657600080fd5b60005b85811015610db65781610d9c8882610e9c565b845260208401935060208301925050600181019050610d89565b5050509392505050565b6000610dd3610dce8461126f565b61121e565b905082815260208101848484011115610deb57600080fd5b610df68482856113b6565b509392505050565b600082601f830112610e0f57600080fd5b8135610e1f848260208601610d54565b91505092915050565b60008083601f840112610e3a57600080fd5b8235905067ffffffffffffffff811115610e5357600080fd5b602083019150836001820283011115610e6b57600080fd5b9250929050565b600082601f830112610e8357600080fd5b8135610e93848260208601610dc0565b91505092915050565b600081359050610eab8161153e565b92915050565b600081519050610ec08161153e565b92915050565b60008060208385031215610ed957600080fd5b600083013567ffffffffffffffff811115610ef357600080fd5b610eff85828601610e28565b92509250509250929050565b600060208284031215610f1d57600080fd5b600082013567ffffffffffffffff811115610f3757600080fd5b610f4384828501610e72565b91505092915050565b600060208284031215610f5e57600080fd5b6000610f6c84828501610e9c565b91505092915050565b600060208284031215610f8757600080fd5b6000610f9584828501610eb1565b91505092915050565b60008060408385031215610fb157600080fd5b6000610fbf85828601610e9c565b925050602083013567ffffffffffffffff811115610fdc57600080fd5b610fe885828601610dfe565b9150509250929050565b610ffb816112fb565b82525050565b61100a8161130d565b82525050565b61101981611319565b82525050565b600061102a826112a0565b61103481856112ab565b93506110448185602086016113c5565b61104d81611516565b840191505092915050565b61106181611392565b82525050565b60006110746000836112bc565b915061107f82611527565b600082019050919050565b61109381611336565b82525050565b6110a2816113a4565b82525050565b6110b181611364565b82525050565b6110c08161136e565b82525050565b6110cf8161137e565b82525050565b60006110e082611067565b9150819050919050565b60006020820190506110ff6000830184610ff2565b92915050565b600060408201905061111a6000830185610ff2565b6111276020830184610ff2565b9392505050565b60006040820190506111436000830185611001565b8181036020830152611155818461101f565b90509392505050565b600060a0820190506111736000830188611010565b61118060208301876110c6565b61118d604083018661108a565b61119a60608301856110b7565b6111a76080830184611099565b9695505050505050565b60006020820190506111c66000830184611058565b92915050565b60006020820190506111e160008301846110a8565b92915050565b60006060820190506111fc60008301866110a8565b61120960208301856110a8565b61121660408301846110a8565b949350505050565b6000611228611239565b905061123482826113f8565b919050565b6000604051905090565b600067ffffffffffffffff82111561125e5761125d6114e7565b5b602082029050602081019050919050565b600067ffffffffffffffff82111561128a576112896114e7565b5b61129382611516565b9050602081019050919050565b600081519050919050565b600082825260208201905092915050565b600081905092915050565b60006112d282611364565b91506112dd83611364565b9250828210156112f0576112ef61145a565b5b828203905092915050565b600061130682611344565b9050919050565b60008115159050919050565b6000819050919050565b60008190506113318261152a565b919050565b600061ffff82169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600063ffffffff82169050919050565b600067ffffffffffffffff82169050919050565b600061139d82611323565b9050919050565b60006113af82611336565b9050919050565b82818337600083830152505050565b60005b838110156113e35780820151818401526020810190506113c8565b838111156113f2576000848401525b50505050565b61140182611516565b810181811067ffffffffffffffff821117156114205761141f6114e7565b5b80604052505050565b600061143482611364565b915061143f83611364565b92508261144f5761144e611489565b5b828206905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b50565b6002811061153b5761153a6114b8565b5b50565b61154781611364565b811461155257600080fd5b5056fea2646970667358221220a3faba59a415d7ae9a8a6cd095c425fd1040acf2ff0f590706ed907989ced93c64736f6c63430008040033",
  "deployedBytecode": "0x6080604052600436106100c25760003560e01c8063565429de1161007f57806391ad27b41161005957806391ad27b414610259578063c1af578514610284578063ca6a9ef81461028e578063e55ae4e8146102b9576100c2565b8063565429de146101c55780636b68c03c146101f05780636e04ff0d1461021b576100c2565b806309bc33a7146100c75780631fe543e3146100f2578063320229eb1461011b5780634585e33b14610146578063473f1ddc1461016f57806353a2c19a1461019a575b600080fd5b3480156100d357600080fd5b506100dc6102f6565b6040516100e991906111cc565b60405180910390f35b3480156100fe57600080fd5b5061011960048036038101906101149190610f9e565b61031e565b005b34801561012757600080fd5b506101306103de565b60405161013d91906111cc565b60405180910390f35b34801561015257600080fd5b5061016d60048036038101906101689190610ec6565b6103e8565b005b34801561017b57600080fd5b50610184610633565b60405161019191906110ea565b60405180910390f35b3480156101a657600080fd5b506101af61065d565b6040516101bc91906111cc565b60405180910390f35b3480156101d157600080fd5b506101da61066a565b6040516101e791906111cc565b60405180910390f35b3480156101fc57600080fd5b50610205610676565b60405161021291906111b1565b60405180910390f35b34801561022757600080fd5b50610242600480360381019061023d9190610f0b565b61068d565b60405161025092919061112e565b60405180910390f35b34801561026557600080fd5b5061026e610786565b60405161027b91906111cc565b60405180910390f35b61028c6107ae565b005b34801561029a57600080fd5b506102a361096a565b6040516102b091906111cc565b60405180910390f35b3480156102c557600080fd5b506102e060048036038101906102db9190610f4c565b610977565b6040516102ed91906110ea565b60405180910390f35b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146103d057337f00000000000000000000000000000000000000000000000000000000000000006040517f1cf993f40000000000000000000000000000000000000000000000000000000081526004016103c7929190611105565b60405180910390fd5b6103da82826109e4565b5050565b6000600254905090565b60006104026040518060200160405280600081525061068d565b509050806104975747600080549050600160149054906101000a900460ff166001811115610459577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b6040517f6e195f2500000000000000000000000000000000000000000000000000000000815260040161048e939291906111e7565b60405180910390fd5b60018060146101000a81548160ff021916908360018111156104e2577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b021790555060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16635d3b1d307f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000060037f000000000000000000000000000000000000000000000000000000000000000060016040518663ffffffff1660e01b81526004016105ac95949392919061115e565b602060405180830381600087803b1580156105c657600080fd5b505af11580156105da573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105fe9190610f75565b9050807febf56642252004c18a776f30d528e7a0ce8c5db14b6596fb6550f630c8a24c6c60405160405180910390a250505050565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000600161ffff16905090565b60008080549050905090565b6000600160149054906101000a900460ff16905090565b600060606000600160149054906101000a900460ff1660018111156106db577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60006001811115610715577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b14905060007f00000000000000000000000000000000000000000000000000000000000000006002544261074991906112c7565b119050600080600080549050119050600080471190508380156107695750825b80156107725750815b801561077b5750805b955050505050915091565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b7f0000000000000000000000000000000000000000000000000000000000000000341015610808576040517f84da4c9d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60006001811115610842577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b600160149054906101000a900460ff16600181111561088a577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b146108c1576040517f3c415f9900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503373ffffffffffffffffffffffffffffffffffffffff16347f24db4f65d53d68dc208151fc0a00d767da628055a922836a07edef3b5732f9a260405160405180910390a3565b6000600361ffff16905090565b60008082815481106109b2577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6000808054905082600081518110610a25577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010151610a379190611429565b90506000808281548110610a74577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905080600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000600160146101000a81548160ff02191690836001811115610b2e577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b0217905550600067ffffffffffffffff811115610b74577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604051908082528060200260200182016040528015610ba25781602001602082028036833780820191505090505b5060009080519060200190610bb8929190610cad565b504260028190555060008173ffffffffffffffffffffffffffffffffffffffff1647604051610be6906110d5565b60006040518083038185875af1925050503d8060008114610c23576040519150601f19603f3d011682016040523d82523d6000602084013e610c28565b606091505b5050905080610c63576040517f3a47374900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8173ffffffffffffffffffffffffffffffffffffffff167fcb9fa3034843627ae01a821c8b4301695ba7f920fba3715887eea51b3420167360405160405180910390a25050505050565b828054828255906000526020600020908101928215610d26579160200282015b82811115610d255782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190610ccd565b5b509050610d339190610d37565b5090565b5b80821115610d50576000816000905550600101610d38565b5090565b6000610d67610d6284611243565b61121e565b90508083825260208201905082856020860282011115610d8657600080fd5b60005b85811015610db65781610d9c8882610e9c565b845260208401935060208301925050600181019050610d89565b5050509392505050565b6000610dd3610dce8461126f565b61121e565b905082815260208101848484011115610deb57600080fd5b610df68482856113b6565b509392505050565b600082601f830112610e0f57600080fd5b8135610e1f848260208601610d54565b91505092915050565b60008083601f840112610e3a57600080fd5b8235905067ffffffffffffffff811115610e5357600080fd5b602083019150836001820283011115610e6b57600080fd5b9250929050565b600082601f830112610e8357600080fd5b8135610e93848260208601610dc0565b91505092915050565b600081359050610eab8161153e565b92915050565b600081519050610ec08161153e565b92915050565b60008060208385031215610ed957600080fd5b600083013567ffffffffffffffff811115610ef357600080fd5b610eff85828601610e28565b92509250509250929050565b600060208284031215610f1d57600080fd5b600082013567ffffffffffffffff811115610f3757600080fd5b610f4384828501610e72565b91505092915050565b600060208284031215610f5e57600080fd5b6000610f6c84828501610e9c565b91505092915050565b600060208284031215610f8757600080fd5b6000610f9584828501610eb1565b91505092915050565b60008060408385031215610fb157600080fd5b6000610fbf85828601610e9c565b925050602083013567ffffffffffffffff811115610fdc57600080fd5b610fe885828601610dfe565b9150509250929050565b610ffb816112fb565b82525050565b61100a8161130d565b82525050565b61101981611319565b82525050565b600061102a826112a0565b61103481856112ab565b93506110448185602086016113c5565b61104d81611516565b840191505092915050565b61106181611392565b82525050565b60006110746000836112bc565b915061107f82611527565b600082019050919050565b61109381611336565b82525050565b6110a2816113a4565b82525050565b6110b181611364565b82525050565b6110c08161136e565b82525050565b6110cf8161137e565b82525050565b60006110e082611067565b9150819050919050565b60006020820190506110ff6000830184610ff2565b92915050565b600060408201905061111a6000830185610ff2565b6111276020830184610ff2565b9392505050565b60006040820190506111436000830185611001565b8181036020830152611155818461101f565b90509392505050565b600060a0820190506111736000830188611010565b61118060208301876110c6565b61118d604083018661108a565b61119a60608301856110b7565b6111a76080830184611099565b9695505050505050565b60006020820190506111c66000830184611058565b92915050565b60006020820190506111e160008301846110a8565b92915050565b60006060820190506111fc60008301866110a8565b61120960208301856110a8565b61121660408301846110a8565b949350505050565b6000611228611239565b905061123482826113f8565b919050565b6000604051905090565b600067ffffffffffffffff82111561125e5761125d6114e7565b5b602082029050602081019050919050565b600067ffffffffffffffff82111561128a576112896114e7565b5b61129382611516565b9050602081019050919050565b600081519050919050565b600082825260208201905092915050565b600081905092915050565b60006112d282611364565b91506112dd83611364565b9250828210156112f0576112ef61145a565b5b828203905092915050565b600061130682611344565b9050919050565b60008115159050919050565b6000819050919050565b60008190506113318261152a565b919050565b600061ffff82169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600063ffffffff82169050919050565b600067ffffffffffffffff82169050919050565b600061139d82611323565b9050919050565b60006113af82611336565b9050919050565b82818337600083830152505050565b60005b838110156113e35780820151818401526020810190506113c8565b838111156113f2576000848401525b50505050565b61140182611516565b810181811067ffffffffffffffff821117156114205761141f6114e7565b5b80604052505050565b600061143482611364565b915061143f83611364565b92508261144f5761144e611489565b5b828206905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b50565b6002811061153b5761153a6114b8565b5b50565b61154781611364565b811461155257600080fd5b5056fea2646970667358221220a3faba59a415d7ae9a8a6cd095c425fd1040acf2ff0f590706ed907989ced93c64736f6c63430008040033",
  "devdoc": {
    "author": "Lawal Abubakar",
    "details": "This implements the Chainlink VRF Version 2",
    "kind": "dev",
    "methods": {
      "checkUpkeep(bytes)": {
        "returns": {
          "upkeepNeeded": "The state of the contract before calling VRF"
        }
      },
      "constructor": {
        "params": {
          "callbackGasLimit": "same as gaslane",
          "gaslane": "needed as a variable for VRF requestRandomword Method (from Chainlink account)",
          "interval": "required to operate chainlink keeper",
          "subscriptionId": "same as gaslane",
          "vrfCoordinatorV2": "address of chainlink vrf"
        }
      },
      "performUpkeep(bytes)": {
        "details": "Once `checkUpkeep` is returning `true`, this function is called and it kicks off a Chainlink VRF call to get a random winner."
      }
    },
    "title": "A sample Raffle Contract",
    "version": 1
  },
  "userdoc": {
    "events": {
      "newPlayer(uint256,address)": {
        "notice": "Events "
      }
    },
    "kind": "user",
    "methods": {
      "checkUpkeep(bytes)": {
        "notice": "Function highlighted conditions that must be met before chaink VRF give us a random number"
      },
      "constructor": {
        "notice": "constructor to initialize some state variables"
      },
      "enterLottery()": {
        "notice": "This functions lets people participate in the lottery "
      }
    },
    "notice": "This contract is for creating a sample Lottery contract",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 201,
        "contract": "contracts/lottery.sol:Lottery",
        "label": "s_players",
        "offset": 0,
        "slot": "0",
        "type": "t_array(t_address_payable)dyn_storage"
      },
      {
        "astId": 216,
        "contract": "contracts/lottery.sol:Lottery",
        "label": "s_recentWinner",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 219,
        "contract": "contracts/lottery.sol:Lottery",
        "label": "s_lotteryState",
        "offset": 20,
        "slot": "1",
        "type": "t_enum(LotteryState)192"
      },
      {
        "astId": 221,
        "contract": "contracts/lottery.sol:Lottery",
        "label": "s_lastTimeStamp",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_address_payable": {
        "encoding": "inplace",
        "label": "address payable",
        "numberOfBytes": "20"
      },
      "t_array(t_address_payable)dyn_storage": {
        "base": "t_address_payable",
        "encoding": "dynamic_array",
        "label": "address payable[]",
        "numberOfBytes": "32"
      },
      "t_enum(LotteryState)192": {
        "encoding": "inplace",
        "label": "enum Lottery.LotteryState",
        "numberOfBytes": "1"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}